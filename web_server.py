from flask import Flask, render_template_string, jsonify
import redis
import json
import os
import time

app = Flask(__name__)

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Redis
def get_redis_connection():
    try:
        redis_host = os.getenv('REDIS_HOST', 'localhost')
        redis_port = int(os.getenv('REDIS_PORT', 6379))
        redis_client = redis.Redis(host=redis_host, port=redis_port, decode_responses=True)
        redis_client.ping()
        return redis_client
    except:
        return None

# HTML —à–∞–±–ª–æ–Ω
HTML_TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
    <title>–ì—Ä–∞ –õ–æ–≤–µ—Ü—å - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background-color: #f0f0f0; }
        .container { max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #333; text-align: center; }
        .stats { background: #e8f4f8; padding: 15px; border-radius: 5px; margin: 20px 0; }
        .game-info { background: #fff3cd; padding: 15px; border-radius: 5px; margin: 20px 0; }
        .redis-status { padding: 10px; border-radius: 5px; margin: 10px 0; }
        .connected { background: #d4edda; color: #155724; }
        .disconnected { background: #f8d7da; color: #721c24; }
        button { background: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; }
        button:hover { background: #0056b3; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üéÆ –ì—Ä–∞ "–õ–æ–≤–µ—Ü—å" - –í–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å</h1>
        
        <div class="game-info">
            <h3>–ü—Ä–æ –≥—Ä—É:</h3>
            <p>–¶–µ –≥—Ä–∞ "–õ–æ–≤–µ—Ü—å", –¥–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ª–æ–≤–∏—Ç–∏ —è–π—Ü—è, —â–æ –ø–∞–¥–∞—é—Ç—å –∑–≤–µ—Ä—Ö—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Å—Ç—Ä—ñ–ª–∫–∏ –≤–ª—ñ–≤–æ/–≤–ø—Ä–∞–≤–æ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è.</p>
            <p>–ì—Ä–∞ –∑–±–µ—Ä—ñ–≥–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤ Redis –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.</p>
        </div>

        <div class="redis-status" id="redis-status">
            <strong>–°—Ç–∞—Ç—É—Å Redis:</strong> <span id="status-text">–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞...</span>
        </div>

        <div class="stats">
            <h3>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</h3>
            <p><strong>–í—Å—å–æ–≥–æ —ñ–≥–æ—Ä:</strong> <span id="total-games">0</span></p>
            <p><strong>–û—Å—Ç–∞–Ω–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:</strong></p>
            <div id="recent-scores">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</div>
        </div>

        <div style="text-align: center; margin-top: 30px;">
            <button onclick="refreshStats()">üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</button>
            <button onclick="simulateGame()">üéÆ –°–∏–º—É–ª—é–≤–∞—Ç–∏ –≥—Ä—É</button>
        </div>
    </div>

    <script>
        function refreshStats() {
            fetch('/api/stats')
                .then(response => response.json())
                .then(data => {
                    document.getElementById('total-games').textContent = data.total_games;
                    document.getElementById('status-text').textContent = data.redis_connected ? '–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ ‚úÖ' : '–ù–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ ‚ùå';
                    document.getElementById('redis-status').className = 'redis-status ' + (data.redis_connected ? 'connected' : 'disconnected');
                    
                    let scoresHtml = '';
                    if (data.recent_scores && data.recent_scores.length > 0) {
                        data.recent_scores.forEach(score => {
                            scoresHtml += `<p>–°–ø—ñ–π–º–∞–Ω–æ: ${score.score}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${score.lost} (${new Date(score.timestamp * 1000).toLocaleString()})</p>`;
                        });
                    } else {
                        scoresHtml = '<p>–ü–æ–∫–∏ –Ω–µ–º–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤</p>';
                    }
                    document.getElementById('recent-scores').innerHTML = scoresHtml;
                });
        }

        function simulateGame() {
            const score = Math.floor(Math.random() * 20) + 1;
            const lost = Math.floor(Math.random() * 5);
            
            fetch('/api/simulate', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({score: score, lost: lost})
            })
            .then(response => response.json())
            .then(data => {
                alert(`–°–∏–º—É–ª—è—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ø—ñ–π–º–∞–Ω–æ: ${score}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${lost}`);
                refreshStats();
            });
        }

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥
        setInterval(refreshStats, 5000);
        
        // –ü–æ—á–∞—Ç–∫–æ–≤–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        refreshStats();
    </script>
</body>
</html>
"""

@app.route('/')
def index():
    return render_template_string(HTML_TEMPLATE)

@app.route('/api/stats')
def get_stats():
    redis_client = get_redis_connection()
    
    if redis_client:
        try:
            total_games = redis_client.llen('game_scores')
            recent_scores = []
            scores = redis_client.lrange('game_scores', 0, 4)  # –û—Å—Ç–∞–Ω–Ω—ñ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            for score_json in scores:
                score_data = json.loads(score_json)
                recent_scores.append(score_data)
            
            return jsonify({
                'redis_connected': True,
                'total_games': total_games,
                'recent_scores': recent_scores
            })
        except Exception as e:
            return jsonify({
                'redis_connected': False,
                'total_games': 0,
                'recent_scores': [],
                'error': str(e)
            })
    else:
        return jsonify({
            'redis_connected': False,
            'total_games': 0,
            'recent_scores': []
        })

@app.route('/api/simulate', methods=['POST'])
def simulate_game():
    from flask import request
    data = request.get_json()
    
    redis_client = get_redis_connection()
    if redis_client:
        try:
            game_result = {
                'score': data.get('score', 0),
                'lost': data.get('lost', 0),
                'timestamp': str(int(time.time()))
            }
            redis_client.lpush('game_scores', json.dumps(game_result))
            redis_client.ltrim('game_scores', 0, 9)  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 10
            
            return jsonify({'success': True, 'message': '–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ'})
        except Exception as e:
            return jsonify({'success': False, 'error': str(e)})
    else:
        return jsonify({'success': False, 'error': 'Redis –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ'})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
